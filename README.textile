h1. Definitions

* *Wrapper:* A set of bindings to make using the Poppler library easier for a given toolkit.  For instance, Okular uses the Qt4 wrapper, and Evince uses the Glib wrapper.
* *Backend:* An implementation that actually performs the rendering of the PDF.  Currently, there are two complete backends in Poppler:
** *Splash:* a low-level backend inherited from Xpdf
** *Cairo:* performs all its rendering using the Cairo library

h1. Purpose of this Patchset

Currently, the default backend for the Qt4 wrapper (used by Okular) is Splash.  Unfortunately, Splash does not support subpixel rendering of fonts, so those of us using KDE are stuck with somewhat ugly-looking fonts.  This patchset adds support for the Cairo backend to the Qt4 wrapper.  It also forces subpixel rendering in the Cairo backend.  The upshot of this is that we get beautiful fonts in Okular.

- Before := !http://cloud.github.com/downloads/giddie/poppler-qt4-cairo-backend/before.png!
- After := !http://cloud.github.com/downloads/giddie/poppler-qt4-cairo-backend/after.png!

The Poppler developers feel that the introduction of a dependency on Cairo to the Qt4 wrapper (even though it's an optional dependency) is politically controversial, and are not willing to merge it.  For those of us who already have Cairo installed (e.g. for Firefox), and are more worried about beautiful PDFs than toolkit politics, this patchset is here for us :)

There is a partly-implemented backend available that uses Arthur, the Qt4 2D rendering interface.  Although this would provide the perfect solution for rendering in Okular, it is nowhere near complete, and at the time of writing I'm not aware of anyone working on it.  This patchset is a "quick fix" for the problem of font rendering in Okular.  The Arthur backend would be a more elegant, long-term solution, if it were completed.

h1. Organisation of this Repository

This repository tracks the official Poppler repository (git://git.freedesktop.org/git/poppler/poppler), and all Poppler's tags are present in this repository.  However, my branches are a little different:

- patchset := Contains a set of patch files that may be applied to the current Poppler release.  This branch does not share any ancestor with the Poppler source and is here to provide easy access to the patch files.
- master := Follows poppler/master.
- qt4-lcd := Qt4-Cairo patchset applied on top of master.  This branch is rebased on top of master at regular intervals.
- maint := Follows the maintenance branch (e.g. poppler-0.12), from which maintenance releases are tagged (e.g. poppler-0.12.1).
- qt4-lcd-maint := Qt4-Cairo patchset applied on top of maint.  This branch is rebased on top of maint at regular intervals (usually whenever a new Poppler release is tagged.)

h1. How can I generate my own patch files?

# Clone the repository:

bc. git clone git://github.com/giddie/poppler-qt4-cairo-backend.git

#2 Change into the directory and checkout the appropriate branch.  If you're a packager, you'll probably want the maintenance branch '*qt4-lcd-maint*', which tracks Poppler's actual releases:

bc. cd poppler-qt4-cairo-backend
git checkout -b qt4-lcd-maint origin/qt4-lcd-maint

#3 Generate patch files for all the commits between *maint* and the tip of the current branch:

bc. git format-patch origin/maint

#4 The generated patch files should be applied in numerical order to Poppler's official source package.  If you have 
